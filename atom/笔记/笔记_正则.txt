40, 正则表达式
        python 中的  re模块
        re.match()  -->从开始匹配，首项不符就返回 None
        re.search() -->整体匹配，直到找到匹配字符， 找到第一个匹配值就结束
        re.findall()  -->  匹配字符串中所有的符合条件
        re.split()    --->re.split(r'[,:]',li1)  # 将逗号冒号都用作分割符号
        re.sub('正则表达式','替换的值','原字符串')
          也可以在替换的值处改写为函数式
              {
              import re
              li1 = 'jack:34,lily:43'
              result = re.sub(r'\d+', '62', li1)
              print(result)
              def fun(temp):
              num = temp.group()
              num1 = int(num) + 50
              return str(num1)
              # 使用函数对  li1字符串 变更
              result = re.sub(r'\d+', fun, li1)
              print(result)
              }

41, 正则符号
    .  匹配任意字符
    ^  正则中表示开始（从首位），在正则式子中是 非
    $  表示结尾（末尾）
    |  或者
    ()  表示一个整体的范围  (126|163|QQ) --->表示的是3选一
        [126|163|QQ] ---> 表示的是从 1,2,6 中的一个或者后面的单独字母数字匹配
        ()  也可以表示组的意思， 在调用时候 使用 变量.group(1),就可以取到第一组的内容
        ([0-9a-zA-Z]+)(.+)(\1)  --->这里的  \1 表示的是引用第一个组的内容，表示相同的内容
    [] 表示范围，如[0-9],[123456],[a-z],[0-9a-zA-z]
    {} 表示开始和结束，{2，}-->从2以后的多位，{2,5}-->2-5位
    *   表示 0到多位
    +   表示 1到多位
          像 + * 默认是贪婪的，尽可能多的去匹配更多的值。 在后面加上 ？ 就改为非贪婪
    ？  表示 0个或者 1个
    \s 表示空白
    \b 表示边界
    \d 数字    \D  表示非数字（大写是非）
    \w word  [0-9a-zA-Z_]

42, 小括号分组
      引用分组：(通常用于标签，前后名字一致)
        1. number 的方法   \+数字的方式引用   r'<([0-9a-zA-Z]+)>(.+)<(\1)>  ---> (\1)
                  表示引用  \1 的内容
        2. 命名的方式
            ?P<名字>
                  r'<(?P<name1>\w+)>(.+)</(?P=name1)
                  使用 ?P<> 的格式 命名一个标签，后面利用这个标签名字匹配
